@page "/appointments"

<h2 class="mb-4 text-center">Upcoming Appointments</h2>

@if (appointments == null)
{
    <p><em>Loading...</em></p>
}
else if (!appointments.Any())
{
    <p><em>Not data found!</em></p>
}
else
{
    <div class="container mt-4">
        <table class="table table-striped table-bordered table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Pet</th>
                    <th>Owner</th>
                    <th>Date</th>
                    <th>Reason</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var appointment in appointments)
                {
                    <tr>
                        <td>@appointment.PetName</td>
                        <td>@appointment.Owner.Name</td>
                        <td>@appointment.DateTime.ToString("MMMM dd yyyy - HH:mm")</td>
                        <td>@appointment.Reason</td>
                        <td>
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => EditAppointment(appointment.AppointmentId)">
                                <i class="oi oi-pencil"></i> Edit
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteModal(appointment.AppointmentId)">
                                <i class="oi oi-trash"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this appointment?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {

    private List<Appointment> appointments;
    private int? appointmentIdToDelete;


    protected override async Task OnInitializedAsync()
    {
        await LoadAppointments();
    }

    private async Task LoadAppointments()
    {
        var response = (await Http.GetAsync("api/Appointments"))!;
        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            appointments = JsonSerializer.Deserialize<List<Appointment>>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true })!;
            StateHasChanged();
        }
    }

    private void EditAppointment(int id)
    {
        Navigation.NavigateTo($"/schedule-appointment/{id}");
    }

    private async Task OpenDeleteModal(int appointmentId)
    {
        appointmentIdToDelete = appointmentId;
        await JSRuntime.InvokeVoidAsync("showDeleteModal");
    }

    private async Task ConfirmDelete()
    {
        if (appointmentIdToDelete.HasValue)
        {
            var response = await Http.DeleteAsync($"api/Appointments/{appointmentIdToDelete.Value}");
            if (response.IsSuccessStatusCode)
            {
                await LoadAppointments();
                StateHasChanged();
            }
        }

        await JSRuntime.InvokeVoidAsync("hideDeleteModal");
    }
}
